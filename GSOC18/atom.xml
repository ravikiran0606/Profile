<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>GSoC'18 @ CERN</title>
 <link href="http://localhost:4000/atom.xml" rel="self"/>
 <link href="http://localhost:4000/"/>
 <updated>2018-07-11T01:01:55+05:30</updated>
 <id>http://localhost:4000</id>
 <author>
   <name>Ravi Kiran S</name>
   <email></email>
 </author>

 
 <entry>
   <title>SGD Optimizer - Implementation and Testing</title>
   <link href="http://localhost:4000/2018/07/09/sgd/"/>
   <updated>2018-07-09T00:00:00+05:30</updated>
   <id>http://localhost:4000/2018/07/09/sgd</id>
   <content type="html">&lt;p&gt;In this blog post, I will be explaning the implementation of the SGD Optimizer with and without momentum approach. I will also be explaning the methodology I used for testing the correctness of the optimizer.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;sgd-optimizer&quot;&gt;SGD Optimizer:&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Stochastic Gradient Descent is the one of the basic optimization algorithms that is used for training the Deep Neural Networks. I have implemented the SGD Optimization algorithm with and without momentum method. The finalized class diagram for the VOptimizer class and the TSGD class, which is derived from the VOptimizer class is shown below,&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/GSOC18//images/sgd_class_diagram.jpg&quot; alt=&quot;SGD Optimizer&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Here, &lt;code class=&quot;highlighter-rouge&quot;&gt;Step()&lt;/code&gt; function is implemented in the base class VOptimizer. And the &lt;code class=&quot;highlighter-rouge&quot;&gt;UpdateWeights() and UpdateBiases()&lt;/code&gt; functions are pure virtual functions. So other optimizer classes extending from the base class VOptimizer, for example: TSGD class must implement the &lt;code class=&quot;highlighter-rouge&quot;&gt;UpdateWeights() and UpdateBiases()&lt;/code&gt; functions. The &lt;code class=&quot;highlighter-rouge&quot;&gt;fPastWeightGradients and fPastBiasGradients&lt;/code&gt; store the accumulation of the past weight and past bias gradients respectively.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;momentum-update&quot;&gt;Momentum Update:&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;With Stochastic Gradient Descent we don’t compute the exact derivative of our loss function. Instead, we’re estimating it on a small batch. This means we’re not always going in the optimal direction, because our derivatives are ‘noisy’. So, exponentially weighed averages can provide us a better estimate which is closer to the actual derivative than our noisy calculations. This is one reason why momentum might work better than classic SGD.&lt;/p&gt;

&lt;p&gt;The other reason lies in ravines. Ravine is an area, where the surface curves much more steeply in one dimension than in another. Ravines are common near local minimas in deep learning and SGD has troubles getting out of them. SGD will tend to oscillate across the narrow ravine since the negative gradient will point down one of the steep sides rather than along the ravine towards the optimum. Momentum helps accelerate gradients in the right direction.&lt;/p&gt;

&lt;p&gt;Thus, the momentum update is implemented as follows, ( similar to the tensorflow implementation )&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;accumulation = momentum * accumulation + gradient
variable -= learning_rate * accumulation
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, one step of update may be performed as,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
\begin{split}
v_t &amp;= \gamma v_{t-1} + \nabla_\theta J( \theta) \\  
\theta &amp;= \theta - \eta v_t
\end{split}
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;testing-the-optimizer&quot;&gt;Testing the Optimizer:&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;And now, for testing the optimizer, there is no exact methodology that can be used. One possible approach would be to test the convergence of the training and testing error during the training procedure. So the unit tests is created as follows,&lt;/p&gt;

&lt;p&gt;Let, X = Random Matrix ( nSamples x nFeatures ),&lt;br /&gt;
K = Random Matrix ( nFeatures x nOutput ),&lt;br /&gt;
Y = X * K ( nSamples x nOutput ) ( Generated one ).&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I created a simple 3 layer DeepNet with the following architecture,&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/GSOC18//images/sgd_dnn_arch.jpg&quot; alt=&quot;Testing DNN Architecture&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I created the trainingData and testingData in a similar manner as described above. And trained my DeepNet to learn this linear function mapping i.e. Y = X * K.&lt;/p&gt;

&lt;p&gt;Now for testing, one method is to observe the convergence of the training and testing error. They converged very well in a quite number of iterations as below,&lt;/p&gt;

&lt;div&gt;
    &lt;a href=&quot;https://plot.ly/~ravikiran0606/6/?share_key=lJGwP6gA4wYq23HB78U3YM&quot; target=&quot;_blank&quot; title=&quot;SGD without Momentum&quot; style=&quot;display: block; text-align: center;&quot;&gt;&lt;img src=&quot;https://plot.ly/~ravikiran0606/6.png?share_key=lJGwP6gA4wYq23HB78U3YM&quot; alt=&quot;SGD without Momentum&quot; style=&quot;max-width: 100%;width: 600px;&quot; width=&quot;600&quot; onerror=&quot;this.onerror=null;this.src='https://plot.ly/404.png';&quot; /&gt;&lt;/a&gt;
    &lt;script data-plotly=&quot;ravikiran0606:6&quot; sharekey-plotly=&quot;lJGwP6gA4wYq23HB78U3YM&quot; src=&quot;https://plot.ly/embed.js&quot; async=&quot;&quot;&gt;&lt;/script&gt;
&lt;/div&gt;

&lt;div&gt;
    &lt;a href=&quot;https://plot.ly/~ravikiran0606/3/?share_key=pQzr1aQJE3K9hLBjWlpJ5W&quot; target=&quot;_blank&quot; title=&quot;SGD with Momentum&quot; style=&quot;display: block; text-align: center;&quot;&gt;&lt;img src=&quot;https://plot.ly/~ravikiran0606/3.png?share_key=pQzr1aQJE3K9hLBjWlpJ5W&quot; alt=&quot;SGD with Momentum&quot; style=&quot;max-width: 100%;width: 600px;&quot; width=&quot;600&quot; onerror=&quot;this.onerror=null;this.src='https://plot.ly/404.png';&quot; /&gt;&lt;/a&gt;
    &lt;script data-plotly=&quot;ravikiran0606:3&quot; sharekey-plotly=&quot;pQzr1aQJE3K9hLBjWlpJ5W&quot; src=&quot;https://plot.ly/embed.js&quot; async=&quot;&quot;&gt;&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;Another method is to create a identity matrix I = Identity Matrix ( batchSize x nFeatures ) and give this as Input to the DeepNet and forward it and get the output at the last layer. Let this output be Y’ ( batchSize x nOutput ).&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Now, Since the DeepNet is trying to mimic the function Y = X * K, this output Y’ should be equal to K. For this to be true, there is one constrain to be satisfied that the batchSize and nFeatures should be equal so that we can construct the Identity Matrix I as a square matrix with diagonal elements being equal to 1.0. And I got the following results by comparing the Y’ with K.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/GSOC18//images/sgd_tests_relative_error.jpg&quot; alt=&quot;Testing SGD Optimizer - Relative Error&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;references&quot;&gt;References:&lt;/h2&gt;

&lt;p&gt;1)&lt;a href=&quot;https://towardsdatascience.com/stochastic-gradient-descent-with-momentum-a84097641a5d&quot;&gt; SGD with Momentum. &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2)&lt;a href=&quot;https://www.tensorflow.org/api_docs/python/tf/train/MomentumOptimizer&quot;&gt; Tensorflow Implementation of SGD Optimizer. &lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Optimization Modules - Class Structure</title>
   <link href="http://localhost:4000/2018/06/01/design/"/>
   <updated>2018-06-01T00:00:00+05:30</updated>
   <id>http://localhost:4000/2018/06/01/design</id>
   <content type="html">&lt;p&gt;In this blog post, I will be describing the class structure that can be potentially used to include the Optimizers in the TMVA submodule. The already existing API needs to be modified a bit to account for the Optimizers. I will be describing the class structure and also the changes that needs to be done to the existing API.&lt;/p&gt;

&lt;p&gt;Atlast, after discussing with the mentors, I finally found the correct design solution for including the Optimizers in the existing framework and the design seems to be feasible.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;current-workflow-of-one-step-of-optimizers-update&quot;&gt;Current workflow of one step of Optimizer’s update:&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/GSOC18//images/current_workflow1.jpg&quot; alt=&quot;CurrentWorkflow&quot; /&gt;
&lt;img src=&quot;/GSOC18//images/current_workflow2.jpg&quot; alt=&quot;CurrentWorkflow&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;In the current workflow, the class MethodDL creates an instance of the class TDLGradientDescent as minimizer and it is initialized. For performing one step of the update, the minimizer’s Step() function is called. The minimizer’s Step() function in turn calls the class TDeepNet’s Forward(), Backward() and Update() functions. The class TDeepNet’s Update() function iterates through its layers and calls the class VGeneralLayer’s Update() function for each layer. And the &lt;strong&gt;class VGeneralLayer’s Update() function&lt;/strong&gt; is the one which actually does the update of the weights and biases with the corresponding weightGradients and biasGradients through  its &lt;strong&gt;UpdateWeights()&lt;/strong&gt; and &lt;strong&gt;UpdateBiases()&lt;/strong&gt; functions.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;design-issues-and-its-solutions&quot;&gt;Design Issues and its solutions:&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) How to identify the type of update in the class VGeneralLayer like SGD or Adam etc ?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The current implementation by default performs only the schocastic gradient descent update. And there is no way of identifying the type of update depending on the type of Optimizer. So the solution would be to &lt;strong&gt;pass the reference to the Optimizer object&lt;/strong&gt; from the class MethodDL down to the class VGeneralLayer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) Where to store the additional variables like sum of past gradients and other parameters specific to each Optimizer ?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Since these additional variables are needed for performing the updates, they need to be stored in the same class which actually performs the update. The current implementation actually performs the update in the class VGeneralLayer. So as per the current implementation, if we store all the additional variables in the class VGeneralLayer, that would look clumsy and strange since that is not the responsibility of the class VGeneralLayer. So I have decided to &lt;strong&gt;perform the actual update in the Optimizer class and store additional variables in it&lt;/strong&gt;. This would look a bit cleaner.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3) Should we need to move the update function from the class GeneralLayer to Optimizer class ?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Yes&lt;/strong&gt;, we should move the update function to the Optimizer class since its the responsibility of the Optimizer to perform such an update.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4) Do we really need to test the convergence in the Optimizer class itself or move it to the train() method of class MethodDL ?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The current implementation actually has the test for convergence in the Optimizer class itself. But testing for convergence is not the responsibility of the Optimizer class but is the responsibility of the training procedure. So the better option is to &lt;strong&gt;move the test for convergence to the train() method of class MethodDL.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;modified-workflow-of-one-step-of-optimizers-update&quot;&gt;Modified workflow of one step of Optimizer’s update:&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/GSOC18//images/modified_workflow1.jpg&quot; alt=&quot;ModifiedWorkflow&quot; /&gt;
&lt;img src=&quot;/GSOC18//images/modified_workflow2.jpg&quot; alt=&quot;ModifiedWorkflow&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;In the modified workflow, the class MethodDL creates an instance of the class TSGD ( i.e. specific type of optimizer as mentioned in the option ) as minimizer and it is initialized. Now for performing one step of the update, we actually pass the reference to the minimizer object to the class DeepNet’s Update() function. The class DeepNet’s Update() function iterates through each of its layer objects and pass the same reference of the minimizer object to the class VGeneralLayer’s Update() function. And the class VGeneralLayer’s Update() function now performs the update with the use of minimizer’s Step() function. So depending on the type of minimizer object used to perform the update, the corresponding update is performed. Here, the &lt;strong&gt;class TSGD’s Step() function&lt;/strong&gt; is the one which actually does the update of the weights and biases with the corresponding weightGradients and biasGradients through  its &lt;strong&gt;UpdateWeights()&lt;/strong&gt; and &lt;strong&gt;UpdateBiases()&lt;/strong&gt; functions.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;api-changes&quot;&gt;API Changes:&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;in-class-methoddl-&quot;&gt;In class MethodDL :&lt;/h3&gt;

&lt;p&gt;1) Modify the &lt;strong&gt;Struct TTrainingSettings&lt;/strong&gt; to include the option for optimizer.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/GSOC18//images/api_change1.jpg&quot; alt=&quot;APIChange1&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;2) Create an instance of the &lt;strong&gt;particular type of optimizer&lt;/strong&gt; in the Train() method based on the option specified. If no option is specified, default choice would be to use Adam optimizer.&lt;/p&gt;

&lt;h3 id=&quot;in-file-functionsh-&quot;&gt;In file Functions.h :&lt;/h3&gt;

&lt;p&gt;1) Create a enum class EOptimizer with various optimizers.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/GSOC18//images/api_change2.jpg&quot; alt=&quot;APIChange2&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;other-files&quot;&gt;Other files:&lt;/h3&gt;

&lt;p&gt;1) Create a &lt;strong&gt;base class TOptimizer&lt;/strong&gt; with the basic functions. ( Refer to the class diagram below. )&lt;/p&gt;

&lt;p&gt;2) Create various classes like &lt;strong&gt;Class TSGD, Class TAdam&lt;/strong&gt; etc for each optimizer &lt;strong&gt;extending from&lt;/strong&gt; the &lt;strong&gt;base Class TOptimizer&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;3) Re-implement the existing &lt;strong&gt;Class TDLGradientDescent&lt;/strong&gt; with the new design as &lt;strong&gt;Class TSGD&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;  &lt;br /&gt;
&lt;strong&gt;Final Design:&lt;/strong&gt;
&lt;br /&gt;
&lt;img src=&quot;/GSOC18//images/tmva_optimizers_new.jpg&quot; alt=&quot;TMVAOptimizersNew&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I hope that this post helps to get a clear understanding of the new design and its workflow. And atlast I can start coding :D . So my next goal is to re-implement the basic stochastic gradient descent with my new design along with unit tests and make sure everything works good. So, from my next post, I’ll describe more related to coding :P&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Optimization Modules - A Brief Overview</title>
   <link href="http://localhost:4000/2018/05/16/optimizers/"/>
   <updated>2018-05-16T00:00:00+05:30</updated>
   <id>http://localhost:4000/2018/05/16/optimizers</id>
   <content type="html">&lt;p&gt;In this blog post, I would like to give a brief overview of the existing gradient descent optimization algorithms that are available. There are lots of good resources available online. You can check them at the References section at the end of this post.&lt;/p&gt;

&lt;p&gt;The existing TMVA submodule has always used gradient descent to update the parameters and minimize the cost of the neural networks. More advanced optimization methods can speed up learning and perhaps even get you to a better final value for the cost function. Having a good optimization algorithm can be the difference between waiting days vs. just a few hours to get a good result.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Gradient descent&lt;/strong&gt; is a &lt;strong&gt;first-order iterative optimization algorithm&lt;/strong&gt; for finding the minimum of a function. To find a local minimum of a function using gradient descent, one takes steps proportional to the negative of the gradient (or approximate gradient) of the function at the current point.
Gradient descent goes “downhill” on a cost function &lt;code class=&quot;highlighter-rouge&quot;&gt;J&lt;/code&gt;. Think of it as trying to do this:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/GSOC18//images/gradientdescent.jpg&quot; alt=&quot;Gradient Descent&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;gradient-descent-variants&quot;&gt;Gradient Descent Variants:&lt;/h2&gt;

&lt;p&gt;There are three variants of gradient descent, which depends on how much data you use to cacluate the gradients and perform an update. They are as follows,&lt;/p&gt;

&lt;h3 id=&quot;1-batch-gradient-descent&quot;&gt;1) Batch Gradient Descent:&lt;/h3&gt;
&lt;p&gt;Vanilla gradient descent, also known as batch gradient descent, computes the gradient of the cost function w.r.t. to the parameters &lt;script type=&quot;math/tex&quot;&gt;\theta&lt;/script&gt; for the entire training dataset. It supports maximum vectorization, but if the data is large, it cannot fit into the memory.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\theta = \theta - \eta \cdot \nabla_\theta J( \theta)&lt;/script&gt;

&lt;h3 id=&quot;2-stochastic-gradient-descent&quot;&gt;2) Stochastic Gradient Descent:&lt;/h3&gt;
&lt;p&gt;Stochastic gradient descent (SGD) in contrast performs a parameter update for each training example of the training dataset. It cannot exploit vectorization, since it has to iterate through all the training examples and make an update for each training example. It also shows a lot of fluctuations before converging to the solution.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\theta = \theta - \eta \cdot \nabla_\theta J( \theta; x^{(i)}; y^{(i)})&lt;/script&gt;

&lt;h3 id=&quot;3-mini-batch-gradient-descent&quot;&gt;3) Mini-Batch Gradient Descent:&lt;/h3&gt;

&lt;p&gt;Mini-batch gradient descent finally takes the best of both approaches and performs an update for every mini-batch of n training examples. The size of the mini-batch is usually in the power of 2 like 64 or 256, but can vary depending on the applications. It exploits vectorization to some extent and its update is also fast. It is the most preferred way of update among these variants.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\theta = \theta - \eta \cdot \nabla_\theta J( \theta; x^{(i:i+n)}; y^{(i:i+n)})&lt;/script&gt;

&lt;h2 id=&quot;gradient-descent-optimization-algorithms&quot;&gt;Gradient descent optimization algorithms:&lt;/h2&gt;

&lt;p&gt;Here, I’ll discuss about the various gradient descent optimization algorithms that are proven to work best in most of the applications.&lt;/p&gt;

&lt;h3 id=&quot;1-momentum-based-update&quot;&gt;1) Momentum based update:&lt;/h3&gt;

&lt;p&gt;Momentum is a method that helps accelerate SGD in the relevant direction and dampens oscillations as can be seen in the below image. It does this by adding a fraction &lt;script type=&quot;math/tex&quot;&gt;\gamma&lt;/script&gt; of the update vector of the past time step to the current update vector.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SGD without Momentum:&lt;/strong&gt; &lt;img src=&quot;/GSOC18//images/without_momentum.gif&quot; alt=&quot;SGD without momentum&quot; /&gt;
&lt;strong&gt;SGD with Momentum:&lt;/strong&gt; &lt;img src=&quot;/GSOC18//images/with_momentum.gif&quot; alt=&quot;SGD with momentum&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The momentum update is done as follows,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
\begin{split}
v_t &amp;= \gamma v_{t-1} + \eta \nabla_\theta J( \theta) \\  
\theta &amp;= \theta - v_t
\end{split}
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;The usual value of &lt;script type=&quot;math/tex&quot;&gt;\gamma&lt;/script&gt; is 0.9. ie ( &lt;script type=&quot;math/tex&quot;&gt;\gamma&lt;/script&gt; &amp;lt; 1 )&lt;/p&gt;

&lt;h3 id=&quot;2-nesterov-accelerated-momentum&quot;&gt;2) Nesterov accelerated Momentum:&lt;/h3&gt;

&lt;p&gt;Ilya Sutskever suggested a new form of momentum that often works better. It is inspired by the nesterov method for optimizing convex functions. First, make a big jump in the direction of the previous accumulated gradient. Then, measure the gradient where you end up and make correction. Its better to correct a mistake after you have made it. :P&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nesterov Update:&lt;/strong&gt;
&lt;img src=&quot;/GSOC18//images/nesterov_update.png&quot; alt=&quot;Nesterov Update&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here, &lt;span style=&quot;color:brown&quot;&gt;brown vector = jump&lt;/span&gt;, &lt;span style=&quot;color:red&quot;&gt;red vector = correction&lt;/span&gt;, &lt;span style=&quot;color:green&quot;&gt;green vector =  accumulated gradient&lt;/span&gt;, &lt;span style=&quot;color:blue&quot;&gt;blue vector = standard momentum&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;The Nesterov update is done as follows,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
\begin{split}
v_t &amp;= \gamma v_{t-1} + \eta \nabla_\theta J( \theta - \gamma v_{t-1} ) \\  
\theta &amp;= \theta - v_t
\end{split}
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;The usual value of &lt;script type=&quot;math/tex&quot;&gt;\gamma&lt;/script&gt; is 0.9. ie ( &lt;script type=&quot;math/tex&quot;&gt;\gamma&lt;/script&gt; &amp;lt; 1 ) and it depends on the application.&lt;/p&gt;

&lt;h3 id=&quot;3-adagrad&quot;&gt;3) Adagrad:&lt;/h3&gt;

&lt;p&gt;AdaGrad is an optimization method that allows different step sizes for different features. It increases the influence of rare but informative features i.e. It adapts the learning rate to the parameters, performing larger updates for infrequent and smaller updates for frequent parameters. For this reason, it is well-suited for dealing with sparse data.&lt;/p&gt;

&lt;p&gt;The Adagrad update is done as follows,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\theta_{t+1} = \theta_{t} - \dfrac{\eta}{\sqrt{G_{t} + \epsilon}} \odot g_{t}&lt;/script&gt;

&lt;p&gt;where,&lt;br /&gt;
    &lt;script type=&quot;math/tex&quot;&gt;G_{t}&lt;/script&gt; - Sum of the squares of the past gradients w.r.t all parameters &lt;script type=&quot;math/tex&quot;&gt;\theta&lt;/script&gt; along its diagonal.&lt;br /&gt;
    &lt;script type=&quot;math/tex&quot;&gt;\odot&lt;/script&gt; - Matrix-vector dot product.&lt;br /&gt;
    &lt;script type=&quot;math/tex&quot;&gt;g_{t}&lt;/script&gt; - Gradient at time step &lt;script type=&quot;math/tex&quot;&gt;t&lt;/script&gt;.&lt;br /&gt;
    &lt;script type=&quot;math/tex&quot;&gt;\eta&lt;/script&gt; - Learning rate.&lt;br /&gt;
    &lt;script type=&quot;math/tex&quot;&gt;\epsilon&lt;/script&gt; - Smoothing term that avoids division by zero and is usually of the order of &lt;script type=&quot;math/tex&quot;&gt;1e-8&lt;/script&gt;.&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-adadelta&quot;&gt;4) Adadelta:&lt;/h3&gt;

&lt;p&gt;Adadelta is an extension of Adagrad that tries to reduce the monotonically decreasing learning rate. Instead of accumulating all past squared gradients, Adadelta stores only the window of accumulated past gradients to some fixed window size &lt;script type=&quot;math/tex&quot;&gt;w&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;And Instead of storing all the past gradients of window size w, it stores the decaying average of the past squared gradients. The running average &lt;script type=&quot;math/tex&quot;&gt;E[g^2]_t&lt;/script&gt; at time step &lt;script type=&quot;math/tex&quot;&gt;t&lt;/script&gt; is calculated as,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;E[g^2]_t = \gamma E[g^2]_{t-1} + (1 - \gamma) g^2_t&lt;/script&gt;

&lt;p&gt;The root mean squared (RMS) error of the gradient is therefore,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;RMS[g]_{t} = \sqrt{E[g^2]_t + \epsilon}&lt;/script&gt;

&lt;p&gt;And also the decaying average of the past squared updates is computed as,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;E[\Delta \theta^2]_t = \gamma E[\Delta \theta^2]_{t-1} + (1 - \gamma) \Delta \theta^2_t&lt;/script&gt;

&lt;p&gt;The root mean squared (RMS) error of the updates is therefore,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;RMS[\Delta \theta]_{t} = \sqrt{E[\Delta \theta^2]_t + \epsilon}&lt;/script&gt;

&lt;p&gt;Since &lt;script type=&quot;math/tex&quot;&gt;RMS[\Delta \theta]_{t}&lt;/script&gt; is unknown, we approximate it with the RMS of parameter updates until the previous time step i.e. &lt;script type=&quot;math/tex&quot;&gt;RMS[\Delta \theta]_{t-1}&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Thus, the Adadelta update is done as follows,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
\begin{split}
\Delta \theta_t &amp;= - \dfrac{RMS[\Delta \theta]_{t-1}}{RMS[g]_{t}} g_{t} \\
\theta_{t+1} &amp;= \theta_t + \Delta \theta_t 
\end{split}
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;Here, the parameters usually take the default value,&lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;\gamma&lt;/script&gt; - Usually around 0.9.&lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;\epsilon&lt;/script&gt; - Smoothing term that avoids division by zero and is usually of the order of &lt;script type=&quot;math/tex&quot;&gt;1e-8&lt;/script&gt;.&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;5-rmsprop&quot;&gt;5) RMSprop:&lt;/h3&gt;

&lt;p&gt;RMSprop is an unpublished, adaptive learning rate method proposed by Geoff Hinton. The main idea is &lt;strong&gt;“Divide the gradient by a running average of its recent magnitude”&lt;/strong&gt;. It is similar to Adadelta but it is developed independently to overcome the disadvantages of the Adagrad algorithm.&lt;/p&gt;

&lt;p&gt;The RMSprop update is done as follows,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
\begin{split}
E[g^2]_t &amp;= \gamma E[g^2]_{t-1} + (1-\gamma) g^2_t \\  
\theta_{t+1} &amp;= \theta_{t} - \dfrac{\eta}{\sqrt{E[g^2]_t + \epsilon}} g_{t}
\end{split}
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;where,&lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;\gamma&lt;/script&gt; - Usually around 0.9.&lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;\eta&lt;/script&gt; - Learning rate, usually around 0.001.&lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;E[g^2]_t&lt;/script&gt; - Decaying average of the past squared gradients at time step &lt;script type=&quot;math/tex&quot;&gt;t&lt;/script&gt;.&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;6-adam&quot;&gt;6) Adam:&lt;/h3&gt;

&lt;p&gt;Adaptive Moment Estimation (Adam) is another method that computes adaptive learning rates for each parameter. It stores both the decaying average of the past gradients &lt;script type=&quot;math/tex&quot;&gt;m_t&lt;/script&gt;, similar to momentum and also the decaying average of the past squared gradients &lt;script type=&quot;math/tex&quot;&gt;v_t&lt;/script&gt;, similar to RMSprop and Adadelta. Thus, it combines the advantages of both the methods. Adam is the default choice of the optimizer for any application in general.&lt;/p&gt;

&lt;p&gt;The decaying average of the past gradients &lt;script type=&quot;math/tex&quot;&gt;m_t&lt;/script&gt; and the past squared gradients &lt;script type=&quot;math/tex&quot;&gt;v_t&lt;/script&gt; is computed as follows,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
\begin{split}
m_t &amp;= \beta_1 m_{t-1} + (1 - \beta_1) g_t \\  
v_t &amp;= \beta_2 v_{t-1} + (1 - \beta_2) g_t^2  
\end{split}
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;And since these &lt;script type=&quot;math/tex&quot;&gt;m_t&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;v_t&lt;/script&gt; are initialized with zeros, they are biased towards zero, especially during the initial time steps. Thus, to avoid these biases, the bias corrected versions of them are computed as follows,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
\begin{split}
\hat{m}_t &amp;= \dfrac{m_t}{1 - \beta^t_1} \\
\hat{v}_t &amp;= \dfrac{v_t}{1 - \beta^t_2} \end{split}
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;Thus, the Adam update is as follows,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\theta_{t+1} = \theta_{t} - \dfrac{\eta}{\sqrt{\hat{v}_t} + \epsilon} \hat{m}_t&lt;/script&gt;

&lt;p&gt;where,&lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;\beta_1&lt;/script&gt; - usually 0.9.&lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;\beta_2&lt;/script&gt; - usually 0.999.&lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;\eta&lt;/script&gt; - Learning rate.&lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;\epsilon&lt;/script&gt; - usually of the order of &lt;script type=&quot;math/tex&quot;&gt;1e-8&lt;/script&gt;.&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;7-adamax&quot;&gt;7) Adamax:&lt;/h3&gt;

&lt;p&gt;Adamax is the generalization of the Adam algorithm to the &lt;script type=&quot;math/tex&quot;&gt;\ell_{\infty}&lt;/script&gt; norm. Kingma and Ba show that &lt;script type=&quot;math/tex&quot;&gt;v_t&lt;/script&gt; with &lt;script type=&quot;math/tex&quot;&gt;\ell_{\infty}&lt;/script&gt; converges to the more stable value.&lt;/p&gt;

&lt;p&gt;The infinity norm-constrained &lt;script type=&quot;math/tex&quot;&gt;v_t&lt;/script&gt; is denoted as &lt;script type=&quot;math/tex&quot;&gt;u_t&lt;/script&gt; and is computed as follows,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
\begin{split}
u_t &amp;= \beta_2^\infty v_{t-1} + (1 - \beta_2^\infty) |g_t|^\infty\\  
              &amp; = \max(\beta_2 \cdot v_{t-1}, |g_t|)
\end{split}
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;Here, since &lt;script type=&quot;math/tex&quot;&gt;u_t&lt;/script&gt; relies on the max operation, it is not biased towards zero unlike the ones in the Adam algorithm.&lt;/p&gt;

&lt;p&gt;Thus, the Adamax update is as follows,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\theta_{t+1} = \theta_{t} - \dfrac{\eta}{u_t} \hat{m}_t&lt;/script&gt;

&lt;p&gt;where,&lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;\beta_1&lt;/script&gt; - usually 0.9.&lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;\beta_2&lt;/script&gt; - usually 0.999.&lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;\eta&lt;/script&gt; - Learning rate, usually 0.002.&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;8-nadam&quot;&gt;8) Nadam:&lt;/h3&gt;

&lt;p&gt;Nadam is similar to Adam which is a combination of the momentum and the RMSprop. Nadam can be viewed as a combination of the nesterov accelerated momentum and the RMSprop. Here, we do not need to modify the &lt;script type=&quot;math/tex&quot;&gt;\hat{v}_t&lt;/script&gt;. The momentum vector equations are as follows,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align} 
\begin{split}
m_t &amp;= \beta_1 m_{t-1} + (1 - \beta_1) g_t\\  
\hat{m}_t &amp; = \frac{m_t}{1 - \beta^t_1}\\
\theta_{t+1} &amp;= \theta_{t} - \frac{\eta}{\sqrt{\hat{v}_t} + \epsilon} \hat{m}_t
\end{split}
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;Expanding the last equation gives,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\theta_{t+1} = \theta_{t} - \dfrac{\eta}{\sqrt{\hat{v}_t} + \epsilon} (\dfrac{\beta_1 m_{t-1}}{1 - \beta^t_1} + \dfrac{(1 - \beta_1) g_t}{1 - \beta^t_1})&lt;/script&gt;

&lt;p&gt;But since,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\hat{m}_{t-1} =  \dfrac{m_{t-1}}{1 - \beta^t_1}&lt;/script&gt;

&lt;p&gt;we get,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\theta_{t+1} = \theta_{t} - \dfrac{\eta}{\sqrt{\hat{v}_t} + \epsilon} (\beta_1 \hat{m}_{t-1} + \dfrac{(1 - \beta_1) g_t}{1 - \beta^t_1})&lt;/script&gt;

&lt;p&gt;We can now add Nesterov momentum just as we did previously by simply replacing this bias-corrected estimate of the momentum vector of the previous time step &lt;script type=&quot;math/tex&quot;&gt;\hat{m}_{t−1}&lt;/script&gt; with the bias-corrected estimate of the current momentum vector &lt;script type=&quot;math/tex&quot;&gt;\hat{m}_t&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;Thus, the Nadam update is as follows,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\theta_{t+1} = \theta_{t} - \dfrac{\eta}{\sqrt{\hat{v}_t} + \epsilon} (\beta_1 \hat{m}_t + \dfrac{(1 - \beta_1) g_t}{1 - \beta^t_1})&lt;/script&gt;

&lt;h3 id=&quot;summary-of-the-various-update-equations-&quot;&gt;Summary of the various update equations :&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/GSOC18//images/update_eqn.jpg&quot; alt=&quot;Update Equations&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;References:&lt;/h3&gt;

&lt;p&gt;1) &lt;a href=&quot;http://ruder.io/optimizing-gradient-descent/index.html&quot;&gt;An overview of gradient descent optimization algorithms - Sebastian Ruder&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2) &lt;a href=&quot;https://towardsdatascience.com/difference-between-batch-gradient-descent-and-stochastic-gradient-descent-1187f1291aa1&quot;&gt;Difference between Batch Gradient Descent and Stochastic Gradient Descent&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3) &lt;a href=&quot;http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf&quot;&gt;RMSProp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4) &lt;a href=&quot;http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf&quot;&gt;Adaptive Subgradient Methods for Online Learning and Stochastic Optimization&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5) &lt;a href=&quot;https://arxiv.org/abs/1212.5701&quot;&gt;AdaDelta: An Adaptive Learning Rate Method&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;6) &lt;a href=&quot;https://arxiv.org/abs/1412.6980v8&quot;&gt;Adam: A Method for Stochastic Optimization&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;7) &lt;a href=&quot;http://cs229.stanford.edu/proj2015/054_report.pdf&quot;&gt;Nadam: Nesterov Adam optimizer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;8) &lt;a href=&quot;http://cs229.stanford.edu/proj2015/054_report.pdf&quot;&gt;Incorporating Nesterov Momentum into Adam&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;9) &lt;a href=&quot;https://keras.io/optimizers/&quot;&gt;Keras Optimizers&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>GSoC'18 @ CERN-HSF</title>
   <link href="http://localhost:4000/2018/05/06/intro/"/>
   <updated>2018-05-06T00:00:00+05:30</updated>
   <id>http://localhost:4000/2018/05/06/intro</id>
   <content type="html">&lt;p&gt;Hi Everyone, I am glad to inform that I have been selected as a &lt;strong&gt;Student Developer in Google Summer of Code 2018&lt;/strong&gt; at CERN-HSF. I am really excited to contribute to the project. I will be working on the project &lt;strong&gt;“Development of the Deep Learning Optimization Algorithms in TMVA.”&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/GSOC18//images/gsoc18.jpg&quot; alt=&quot;GSoC'18&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CERN-HSF&lt;/strong&gt; (High-Energy Physics Software Foundation) is the umbrella organization for high-energy physics-related projects in GSoC. The &lt;a href=&quot;http://hepsoftwarefoundation.org/&quot;&gt;HEP Software Foundation&lt;/a&gt; facilitates the coordination of common international efforts in high-energy physics software and computing.&lt;/p&gt;

&lt;p&gt;I will be working on TMVA which is a submodule of ROOT Project ( One of the famous projects by CERN ). &lt;strong&gt;ROOT&lt;/strong&gt; is a modular scientific software framework. It provides all the functionalities needed to deal with big data processing, statistical analysis, visualisation and storage. It is mainly written in C++ but integrated with other languages such as Python and R. The &lt;strong&gt;Toolkit for Multivariate Data Analysis with ROOT (TMVA)&lt;/strong&gt; is a standalone project that provides a ROOT-integrated machine learning environment for the processing and parallel evaluation of sophisticated multivariate classification techniques.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The existing TMVA submodule has always used gradient descent to update the parameters and minimize the cost of the neural networks. More advanced optimization methods can speed up learning and perhaps even get you to a better final value for the cost function. Having a good optimization algorithm can be the difference between waiting days vs. just a few hours to get a good result.&lt;br /&gt;&lt;br /&gt;
The project aims to implement various &lt;strong&gt;Optimization Modules ( Momentum-based, Nesterov accelerated momentum, Adagrad, RMSProp, Adadelta, Adamax, Adam, Nadam, AMSGrad etc )&lt;/strong&gt; in Machine learning.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;More Information about the project can be found &lt;a href=&quot;https://summerofcode.withgoogle.com/projects/#5779525665816576&quot;&gt;Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope that this summer will be interesting, challenging and productive. In my next post, I’ll give an overview of the optimization modules.&lt;/p&gt;
</content>
 </entry>
 

</feed>
